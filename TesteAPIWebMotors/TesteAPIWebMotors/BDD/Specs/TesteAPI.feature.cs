// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TesteAPIWebMotors.BDD.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("1 TesteAPI")]
    public partial class _1TesteAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TesteAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "BDD/Specs", "1 TesteAPI", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.1_API MARCA")]
        [NUnit.Framework.TestCaseAttribute("0", "Chevrolet", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Honda", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Ford", null)]
        public virtual void _1_1_APIMARCA(string iD, string rESULTADO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ID", iD);
            argumentsOfScenario.Add("RESULTADO", rESULTADO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.1_API MARCA", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.When(string.Format("faco a requisicao usando o {0} para buscar a marca", iD), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 8
 testRunner.Then(string.Format("valido o {0} de busca na API", rESULTADO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.2_API MODELO")]
        [NUnit.Framework.TestCaseAttribute("1", "Agile", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Astra", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Onix", "2", "3", null)]
        public virtual void _1_2_APIMODELO(string makeID, string modelo, string parametro, string id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MakeID", makeID);
            argumentsOfScenario.Add("modelo", modelo);
            argumentsOfScenario.Add("parametro", parametro);
            argumentsOfScenario.Add("id", id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.2_API MODELO", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.When(string.Format("faco a requisicao usando o {0} para buscar o modelo pelo {1}", makeID, parametro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 18
 testRunner.Then(string.Format("valido o {0} e o {1} do carro", modelo, id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.3_API VERSAO")]
        [NUnit.Framework.TestCaseAttribute("2", "1.5 DX 16V FLEX 4P AUTOMÁTICO", "0", "11", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.5 LX 16V FLEX 4P MANUAL", "1", "12", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2.0 EXL 4X4 16V GASOLINA 4P AUTOMÁTICO", "2", "13", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.8 16V EVO FLEX FREEDOM OPEN EDITION AUTOMÁTICO", "3", "14", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.0 MPI EL 8V FLEX 4P MANUAL", "4", "15", null)]
        public virtual void _1_3_APIVERSAO(string modelID, string versao, string parametro, string id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ModelID", modelID);
            argumentsOfScenario.Add("versao", versao);
            argumentsOfScenario.Add("parametro", parametro);
            argumentsOfScenario.Add("id", id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.3_API VERSAO", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.When(string.Format("faco a requisicao usando o {0} para buscar a versao pelo {1}", modelID, parametro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 28
 testRunner.Then(string.Format("valido o {0} e o {1} do carro", versao, id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.4_API VERSAO_2")]
        [NUnit.Framework.TestCaseAttribute("2", "2.0 EVO 4P AUTOMÁTICO", "Mitsubishi", "Lancer", "0", "11", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 LXL 16V FLEX 4P AUTOMÁTICO", "Honda", "Fit", "1", "12", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 MPFI EFFECT 8V FLEX 4P AUTOMATIZADO", "Chevrolet", "Agile", "2", "13", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 LXL 16V FLEX 4P AUTOMÁTICO", "Honda", "Fit", "3", "14", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2.0 EXL 4X4 16V GASOLINA 4P AUTOMÁTICO", "Honda", "City", "4", "15", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2.0 EVO 4P AUTOMÁTICO", "Mitsubishi", "Lancer", "5", "16", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 LXL 16V FLEX 4P AUTOMÁTICO", "Honda", "Fit", "6", "17", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2.0 EVO 4P AUTOMÁTICO", "Mitsubishi", "Lancer", "7", "18", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 LXL 16V FLEX 4P AUTOMÁTICO", "Honda", "Fit", "8", "19", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.4 MPFI EFFECT 8V FLEX 4P AUTOMATIZADO", "Chevrolet", "Agile", "9", "20", null)]
        public virtual void _1_4_APIVERSAO_2(string modelID, string versao, string marca, string modelo, string parametro, string id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ModelID", modelID);
            argumentsOfScenario.Add("versao", versao);
            argumentsOfScenario.Add("marca", marca);
            argumentsOfScenario.Add("modelo", modelo);
            argumentsOfScenario.Add("parametro", parametro);
            argumentsOfScenario.Add("id", id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.4_API VERSAO_2", null, tagsOfScenario, argumentsOfScenario);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.When(string.Format("faco a requisicao usando o {0} para buscar a nova versao pelo {1}", modelID, parametro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 40
 testRunner.Then(string.Format("valido o {0},{1},{2} e o {3}", versao, marca, modelo, id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
